"use strict";

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');

var goog = jspb;
var global = Function('return this')();

var variant_pb = require('./variant_pb.js');

var agent_info_pb = require('./agent_info_pb.js');

var controller_info_pb = require('./controller_info_pb.js');

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');

goog.exportSymbol('proto.com.rookout.AddAugCommand', null, global);
goog.exportSymbol('proto.com.rookout.AgentIdHitCountPair', null, global);
goog.exportSymbol('proto.com.rookout.AgentsList', null, global);
goog.exportSymbol('proto.com.rookout.AugReportMessage', null, global);
goog.exportSymbol('proto.com.rookout.C2CInitMessage', null, global);
goog.exportSymbol('proto.com.rookout.ClearAugsCommand', null, global);
goog.exportSymbol('proto.com.rookout.ErrorMessage', null, global);
goog.exportSymbol('proto.com.rookout.Exception', null, global);
goog.exportSymbol('proto.com.rookout.HitCountUpdateMessage', null, global);
goog.exportSymbol('proto.com.rookout.InitFinishedMessage', null, global);
goog.exportSymbol('proto.com.rookout.InitialAugsCommand', null, global);
goog.exportSymbol('proto.com.rookout.LogMessage', null, global);
goog.exportSymbol('proto.com.rookout.LogMessage.LogLevel', null, global);
goog.exportSymbol('proto.com.rookout.NewAgentMessage', null, global);
goog.exportSymbol('proto.com.rookout.PingMessage', null, global);
goog.exportSymbol('proto.com.rookout.RemoveAugCommand', null, global);
goog.exportSymbol('proto.com.rookout.RuleStatusMessage', null, global);
goog.exportSymbol('proto.com.rookout.StackFrame', null, global);
goog.exportSymbol('proto.com.rookout.StackTrace', null, global);
goog.exportSymbol('proto.com.rookout.UserMsg', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */

proto.com.rookout.NewAgentMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.NewAgentMessage, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.NewAgentMessage.displayName = 'proto.com.rookout.NewAgentMessage';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.NewAgentMessage.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.NewAgentMessage.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.NewAgentMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.NewAgentMessage.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      agentInfo: (f = msg.getAgentInfo()) && agent_info_pb.AgentInformation.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.NewAgentMessage}
 */


proto.com.rookout.NewAgentMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.NewAgentMessage();
  return proto.com.rookout.NewAgentMessage.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.NewAgentMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.NewAgentMessage}
 */


proto.com.rookout.NewAgentMessage.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value = new agent_info_pb.AgentInformation();
        reader.readMessage(value, agent_info_pb.AgentInformation.deserializeBinaryFromReader);
        msg.setAgentInfo(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.NewAgentMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.NewAgentMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.NewAgentMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.NewAgentMessage.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAgentInfo();

  if (f != null) {
    writer.writeMessage(1, f, agent_info_pb.AgentInformation.serializeBinaryToWriter);
  }
};
/**
 * optional AgentInformation agent_info = 1;
 * @return {?proto.com.rookout.AgentInformation}
 */


proto.com.rookout.NewAgentMessage.prototype.getAgentInfo = function () {
  return (
    /** @type{?proto.com.rookout.AgentInformation} */
    jspb.Message.getWrapperField(this, agent_info_pb.AgentInformation, 1)
  );
};
/** @param {?proto.com.rookout.AgentInformation|undefined} value */


proto.com.rookout.NewAgentMessage.prototype.setAgentInfo = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.com.rookout.NewAgentMessage.prototype.clearAgentInfo = function () {
  this.setAgentInfo(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */


proto.com.rookout.NewAgentMessage.prototype.hasAgentInfo = function () {
  return jspb.Message.getField(this, 1) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.StackFrame = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.StackFrame, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.StackFrame.displayName = 'proto.com.rookout.StackFrame';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.StackFrame.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.StackFrame.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.StackFrame} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.StackFrame.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      filename: jspb.Message.getFieldWithDefault(msg, 1, ""),
      line: jspb.Message.getFieldWithDefault(msg, 2, 0),
      pb_function: jspb.Message.getFieldWithDefault(msg, 3, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.StackFrame}
 */


proto.com.rookout.StackFrame.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.StackFrame();
  return proto.com.rookout.StackFrame.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.StackFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.StackFrame}
 */


proto.com.rookout.StackFrame.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setFilename(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setLine(value);
        break;

      case 3:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setFunction(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.StackFrame.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.StackFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.StackFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.StackFrame.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getFilename();

  if (f.length > 0) {
    writer.writeString(1, f);
  }

  f = message.getLine();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }

  f = message.getFunction();

  if (f.length > 0) {
    writer.writeString(3, f);
  }
};
/**
 * optional string filename = 1;
 * @return {string}
 */


proto.com.rookout.StackFrame.prototype.getFilename = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};
/** @param {string} value */


proto.com.rookout.StackFrame.prototype.setFilename = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional uint32 line = 2;
 * @return {number}
 */


proto.com.rookout.StackFrame.prototype.getLine = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/** @param {number} value */


proto.com.rookout.StackFrame.prototype.setLine = function (value) {
  jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional string function = 3;
 * @return {string}
 */


proto.com.rookout.StackFrame.prototype.getFunction = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 3, "")
  );
};
/** @param {string} value */


proto.com.rookout.StackFrame.prototype.setFunction = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.StackTrace = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.rookout.StackTrace.repeatedFields_, null);
};

goog.inherits(proto.com.rookout.StackTrace, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.StackTrace.displayName = 'proto.com.rookout.StackTrace';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */


proto.com.rookout.StackTrace.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.StackTrace.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.StackTrace.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.StackTrace} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.StackTrace.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      framesList: jspb.Message.toObjectList(msg.getFramesList(), proto.com.rookout.StackFrame.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.StackTrace}
 */


proto.com.rookout.StackTrace.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.StackTrace();
  return proto.com.rookout.StackTrace.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.StackTrace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.StackTrace}
 */


proto.com.rookout.StackTrace.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value = new proto.com.rookout.StackFrame();
        reader.readMessage(value, proto.com.rookout.StackFrame.deserializeBinaryFromReader);
        msg.addFrames(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.StackTrace.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.StackTrace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.StackTrace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.StackTrace.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getFramesList();

  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.com.rookout.StackFrame.serializeBinaryToWriter);
  }
};
/**
 * repeated StackFrame frames = 1;
 * @return {!Array<!proto.com.rookout.StackFrame>}
 */


proto.com.rookout.StackTrace.prototype.getFramesList = function () {
  return (
    /** @type{!Array<!proto.com.rookout.StackFrame>} */
    jspb.Message.getRepeatedWrapperField(this, proto.com.rookout.StackFrame, 1)
  );
};
/** @param {!Array<!proto.com.rookout.StackFrame>} value */


proto.com.rookout.StackTrace.prototype.setFramesList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.com.rookout.StackFrame=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.rookout.StackFrame}
 */


proto.com.rookout.StackTrace.prototype.addFrames = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.rookout.StackFrame, opt_index);
};

proto.com.rookout.StackTrace.prototype.clearFramesList = function () {
  this.setFramesList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.Exception = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.Exception, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.Exception.displayName = 'proto.com.rookout.Exception';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.Exception.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.Exception.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.Exception} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.Exception.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      type: jspb.Message.getFieldWithDefault(msg, 1, ""),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      instance: (f = msg.getInstance()) && variant_pb.Variant.toObject(includeInstance, f),
      traceback: (f = msg.getTraceback()) && proto.com.rookout.StackTrace.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.Exception}
 */


proto.com.rookout.Exception.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.Exception();
  return proto.com.rookout.Exception.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.Exception} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.Exception}
 */


proto.com.rookout.Exception.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setType(value);
        break;

      case 2:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setMessage(value);
        break;

      case 3:
        var value = new variant_pb.Variant();
        reader.readMessage(value, variant_pb.Variant.deserializeBinaryFromReader);
        msg.setInstance(value);
        break;

      case 4:
        var value = new proto.com.rookout.StackTrace();
        reader.readMessage(value, proto.com.rookout.StackTrace.deserializeBinaryFromReader);
        msg.setTraceback(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.Exception.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.Exception.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.Exception} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.Exception.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getType();

  if (f.length > 0) {
    writer.writeString(1, f);
  }

  f = message.getMessage();

  if (f.length > 0) {
    writer.writeString(2, f);
  }

  f = message.getInstance();

  if (f != null) {
    writer.writeMessage(3, f, variant_pb.Variant.serializeBinaryToWriter);
  }

  f = message.getTraceback();

  if (f != null) {
    writer.writeMessage(4, f, proto.com.rookout.StackTrace.serializeBinaryToWriter);
  }
};
/**
 * optional string type = 1;
 * @return {string}
 */


proto.com.rookout.Exception.prototype.getType = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};
/** @param {string} value */


proto.com.rookout.Exception.prototype.setType = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string message = 2;
 * @return {string}
 */


proto.com.rookout.Exception.prototype.getMessage = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 2, "")
  );
};
/** @param {string} value */


proto.com.rookout.Exception.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional Variant instance = 3;
 * @return {?proto.com.rookout.Variant}
 */


proto.com.rookout.Exception.prototype.getInstance = function () {
  return (
    /** @type{?proto.com.rookout.Variant} */
    jspb.Message.getWrapperField(this, variant_pb.Variant, 3)
  );
};
/** @param {?proto.com.rookout.Variant|undefined} value */


proto.com.rookout.Exception.prototype.setInstance = function (value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.com.rookout.Exception.prototype.clearInstance = function () {
  this.setInstance(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */


proto.com.rookout.Exception.prototype.hasInstance = function () {
  return jspb.Message.getField(this, 3) != null;
};
/**
 * optional StackTrace traceback = 4;
 * @return {?proto.com.rookout.StackTrace}
 */


proto.com.rookout.Exception.prototype.getTraceback = function () {
  return (
    /** @type{?proto.com.rookout.StackTrace} */
    jspb.Message.getWrapperField(this, proto.com.rookout.StackTrace, 4)
  );
};
/** @param {?proto.com.rookout.StackTrace|undefined} value */


proto.com.rookout.Exception.prototype.setTraceback = function (value) {
  jspb.Message.setWrapperField(this, 4, value);
};

proto.com.rookout.Exception.prototype.clearTraceback = function () {
  this.setTraceback(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */


proto.com.rookout.Exception.prototype.hasTraceback = function () {
  return jspb.Message.getField(this, 4) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.LogMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.rookout.LogMessage.repeatedFields_, null);
};

goog.inherits(proto.com.rookout.LogMessage, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.LogMessage.displayName = 'proto.com.rookout.LogMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */


proto.com.rookout.LogMessage.repeatedFields_ = [7];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.LogMessage.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.LogMessage.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.LogMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.LogMessage.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
      agentId: jspb.Message.getFieldWithDefault(msg, 2, ""),
      level: jspb.Message.getFieldWithDefault(msg, 3, 0),
      filename: jspb.Message.getFieldWithDefault(msg, 4, ""),
      line: jspb.Message.getFieldWithDefault(msg, 5, 0),
      text: jspb.Message.getFieldWithDefault(msg, 6, ""),
      argumentsList: jspb.Message.toObjectList(msg.getArgumentsList(), variant_pb.Variant.toObject, includeInstance),
      exception: (f = msg.getException()) && proto.com.rookout.Exception.toObject(includeInstance, f),
      formattedMessage: jspb.Message.getFieldWithDefault(msg, 9, ""),
      legacyArguments: (f = msg.getLegacyArguments()) && variant_pb.Variant.toObject(includeInstance, f),
      className: jspb.Message.getFieldWithDefault(msg, 11, ""),
      methodName: jspb.Message.getFieldWithDefault(msg, 12, ""),
      controllerId: jspb.Message.getFieldWithDefault(msg, 13, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.LogMessage}
 */


proto.com.rookout.LogMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.LogMessage();
  return proto.com.rookout.LogMessage.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.LogMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.LogMessage}
 */


proto.com.rookout.LogMessage.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
        msg.setTimestamp(value);
        break;

      case 2:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setAgentId(value);
        break;

      case 3:
        var value =
        /** @type {!proto.com.rookout.LogMessage.LogLevel} */
        reader.readEnum();
        msg.setLevel(value);
        break;

      case 4:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setFilename(value);
        break;

      case 5:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setLine(value);
        break;

      case 6:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setText(value);
        break;

      case 7:
        var value = new variant_pb.Variant();
        reader.readMessage(value, variant_pb.Variant.deserializeBinaryFromReader);
        msg.addArguments(value);
        break;

      case 8:
        var value = new proto.com.rookout.Exception();
        reader.readMessage(value, proto.com.rookout.Exception.deserializeBinaryFromReader);
        msg.setException(value);
        break;

      case 9:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setFormattedMessage(value);
        break;

      case 10:
        var value = new variant_pb.Variant();
        reader.readMessage(value, variant_pb.Variant.deserializeBinaryFromReader);
        msg.setLegacyArguments(value);
        break;

      case 11:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setClassName(value);
        break;

      case 12:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setMethodName(value);
        break;

      case 13:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setControllerId(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.LogMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.LogMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.LogMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.LogMessage.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTimestamp();

  if (f != null) {
    writer.writeMessage(1, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }

  f = message.getAgentId();

  if (f.length > 0) {
    writer.writeString(2, f);
  }

  f = message.getLevel();

  if (f !== 0.0) {
    writer.writeEnum(3, f);
  }

  f = message.getFilename();

  if (f.length > 0) {
    writer.writeString(4, f);
  }

  f = message.getLine();

  if (f !== 0) {
    writer.writeUint32(5, f);
  }

  f = message.getText();

  if (f.length > 0) {
    writer.writeString(6, f);
  }

  f = message.getArgumentsList();

  if (f.length > 0) {
    writer.writeRepeatedMessage(7, f, variant_pb.Variant.serializeBinaryToWriter);
  }

  f = message.getException();

  if (f != null) {
    writer.writeMessage(8, f, proto.com.rookout.Exception.serializeBinaryToWriter);
  }

  f = message.getFormattedMessage();

  if (f.length > 0) {
    writer.writeString(9, f);
  }

  f = message.getLegacyArguments();

  if (f != null) {
    writer.writeMessage(10, f, variant_pb.Variant.serializeBinaryToWriter);
  }

  f = message.getClassName();

  if (f.length > 0) {
    writer.writeString(11, f);
  }

  f = message.getMethodName();

  if (f.length > 0) {
    writer.writeString(12, f);
  }

  f = message.getControllerId();

  if (f.length > 0) {
    writer.writeString(13, f);
  }
};
/**
 * @enum {number}
 */


proto.com.rookout.LogMessage.LogLevel = {
  TRACE: 0,
  DEBUG: 1,
  INFO: 2,
  WARNING: 3,
  ERROR: 4,
  FATAL: 5
};
/**
 * optional google.protobuf.Timestamp timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */

proto.com.rookout.LogMessage.prototype.getTimestamp = function () {
  return (
    /** @type{?proto.google.protobuf.Timestamp} */
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1)
  );
};
/** @param {?proto.google.protobuf.Timestamp|undefined} value */


proto.com.rookout.LogMessage.prototype.setTimestamp = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.com.rookout.LogMessage.prototype.clearTimestamp = function () {
  this.setTimestamp(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */


proto.com.rookout.LogMessage.prototype.hasTimestamp = function () {
  return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string agent_id = 2;
 * @return {string}
 */


proto.com.rookout.LogMessage.prototype.getAgentId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 2, "")
  );
};
/** @param {string} value */


proto.com.rookout.LogMessage.prototype.setAgentId = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional LogLevel level = 3;
 * @return {!proto.com.rookout.LogMessage.LogLevel}
 */


proto.com.rookout.LogMessage.prototype.getLevel = function () {
  return (
    /** @type {!proto.com.rookout.LogMessage.LogLevel} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/** @param {!proto.com.rookout.LogMessage.LogLevel} value */


proto.com.rookout.LogMessage.prototype.setLevel = function (value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};
/**
 * optional string filename = 4;
 * @return {string}
 */


proto.com.rookout.LogMessage.prototype.getFilename = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 4, "")
  );
};
/** @param {string} value */


proto.com.rookout.LogMessage.prototype.setFilename = function (value) {
  jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional uint32 line = 5;
 * @return {number}
 */


proto.com.rookout.LogMessage.prototype.getLine = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/** @param {number} value */


proto.com.rookout.LogMessage.prototype.setLine = function (value) {
  jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional string text = 6;
 * @return {string}
 */


proto.com.rookout.LogMessage.prototype.getText = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 6, "")
  );
};
/** @param {string} value */


proto.com.rookout.LogMessage.prototype.setText = function (value) {
  jspb.Message.setProto3StringField(this, 6, value);
};
/**
 * repeated Variant arguments = 7;
 * @return {!Array<!proto.com.rookout.Variant>}
 */


proto.com.rookout.LogMessage.prototype.getArgumentsList = function () {
  return (
    /** @type{!Array<!proto.com.rookout.Variant>} */
    jspb.Message.getRepeatedWrapperField(this, variant_pb.Variant, 7)
  );
};
/** @param {!Array<!proto.com.rookout.Variant>} value */


proto.com.rookout.LogMessage.prototype.setArgumentsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};
/**
 * @param {!proto.com.rookout.Variant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.rookout.Variant}
 */


proto.com.rookout.LogMessage.prototype.addArguments = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.com.rookout.Variant, opt_index);
};

proto.com.rookout.LogMessage.prototype.clearArgumentsList = function () {
  this.setArgumentsList([]);
};
/**
 * optional Exception exception = 8;
 * @return {?proto.com.rookout.Exception}
 */


proto.com.rookout.LogMessage.prototype.getException = function () {
  return (
    /** @type{?proto.com.rookout.Exception} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Exception, 8)
  );
};
/** @param {?proto.com.rookout.Exception|undefined} value */


proto.com.rookout.LogMessage.prototype.setException = function (value) {
  jspb.Message.setWrapperField(this, 8, value);
};

proto.com.rookout.LogMessage.prototype.clearException = function () {
  this.setException(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */


proto.com.rookout.LogMessage.prototype.hasException = function () {
  return jspb.Message.getField(this, 8) != null;
};
/**
 * optional string formatted_message = 9;
 * @return {string}
 */


proto.com.rookout.LogMessage.prototype.getFormattedMessage = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 9, "")
  );
};
/** @param {string} value */


proto.com.rookout.LogMessage.prototype.setFormattedMessage = function (value) {
  jspb.Message.setProto3StringField(this, 9, value);
};
/**
 * optional Variant legacy_arguments = 10;
 * @return {?proto.com.rookout.Variant}
 */


proto.com.rookout.LogMessage.prototype.getLegacyArguments = function () {
  return (
    /** @type{?proto.com.rookout.Variant} */
    jspb.Message.getWrapperField(this, variant_pb.Variant, 10)
  );
};
/** @param {?proto.com.rookout.Variant|undefined} value */


proto.com.rookout.LogMessage.prototype.setLegacyArguments = function (value) {
  jspb.Message.setWrapperField(this, 10, value);
};

proto.com.rookout.LogMessage.prototype.clearLegacyArguments = function () {
  this.setLegacyArguments(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */


proto.com.rookout.LogMessage.prototype.hasLegacyArguments = function () {
  return jspb.Message.getField(this, 10) != null;
};
/**
 * optional string class_name = 11;
 * @return {string}
 */


proto.com.rookout.LogMessage.prototype.getClassName = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 11, "")
  );
};
/** @param {string} value */


proto.com.rookout.LogMessage.prototype.setClassName = function (value) {
  jspb.Message.setProto3StringField(this, 11, value);
};
/**
 * optional string method_name = 12;
 * @return {string}
 */


proto.com.rookout.LogMessage.prototype.getMethodName = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 12, "")
  );
};
/** @param {string} value */


proto.com.rookout.LogMessage.prototype.setMethodName = function (value) {
  jspb.Message.setProto3StringField(this, 12, value);
};
/**
 * optional string controller_id = 13;
 * @return {string}
 */


proto.com.rookout.LogMessage.prototype.getControllerId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 13, "")
  );
};
/** @param {string} value */


proto.com.rookout.LogMessage.prototype.setControllerId = function (value) {
  jspb.Message.setProto3StringField(this, 13, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.RuleStatusMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.RuleStatusMessage, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.RuleStatusMessage.displayName = 'proto.com.rookout.RuleStatusMessage';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.RuleStatusMessage.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.RuleStatusMessage.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.RuleStatusMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.RuleStatusMessage.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      agentId: jspb.Message.getFieldWithDefault(msg, 1, ""),
      ruleId: jspb.Message.getFieldWithDefault(msg, 2, ""),
      active: jspb.Message.getFieldWithDefault(msg, 3, ""),
      error: (f = msg.getError()) && variant_pb.Error.toObject(includeInstance, f),
      controllerId: jspb.Message.getFieldWithDefault(msg, 5, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.RuleStatusMessage}
 */


proto.com.rookout.RuleStatusMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.RuleStatusMessage();
  return proto.com.rookout.RuleStatusMessage.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.RuleStatusMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.RuleStatusMessage}
 */


proto.com.rookout.RuleStatusMessage.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setAgentId(value);
        break;

      case 2:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setRuleId(value);
        break;

      case 3:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setActive(value);
        break;

      case 4:
        var value = new variant_pb.Error();
        reader.readMessage(value, variant_pb.Error.deserializeBinaryFromReader);
        msg.setError(value);
        break;

      case 5:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setControllerId(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.RuleStatusMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.RuleStatusMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.RuleStatusMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.RuleStatusMessage.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAgentId();

  if (f.length > 0) {
    writer.writeString(1, f);
  }

  f = message.getRuleId();

  if (f.length > 0) {
    writer.writeString(2, f);
  }

  f = message.getActive();

  if (f.length > 0) {
    writer.writeString(3, f);
  }

  f = message.getError();

  if (f != null) {
    writer.writeMessage(4, f, variant_pb.Error.serializeBinaryToWriter);
  }

  f = message.getControllerId();

  if (f.length > 0) {
    writer.writeString(5, f);
  }
};
/**
 * optional string agent_id = 1;
 * @return {string}
 */


proto.com.rookout.RuleStatusMessage.prototype.getAgentId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};
/** @param {string} value */


proto.com.rookout.RuleStatusMessage.prototype.setAgentId = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string rule_id = 2;
 * @return {string}
 */


proto.com.rookout.RuleStatusMessage.prototype.getRuleId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 2, "")
  );
};
/** @param {string} value */


proto.com.rookout.RuleStatusMessage.prototype.setRuleId = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string active = 3;
 * @return {string}
 */


proto.com.rookout.RuleStatusMessage.prototype.getActive = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 3, "")
  );
};
/** @param {string} value */


proto.com.rookout.RuleStatusMessage.prototype.setActive = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional Error error = 4;
 * @return {?proto.com.rookout.Error}
 */


proto.com.rookout.RuleStatusMessage.prototype.getError = function () {
  return (
    /** @type{?proto.com.rookout.Error} */
    jspb.Message.getWrapperField(this, variant_pb.Error, 4)
  );
};
/** @param {?proto.com.rookout.Error|undefined} value */


proto.com.rookout.RuleStatusMessage.prototype.setError = function (value) {
  jspb.Message.setWrapperField(this, 4, value);
};

proto.com.rookout.RuleStatusMessage.prototype.clearError = function () {
  this.setError(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */


proto.com.rookout.RuleStatusMessage.prototype.hasError = function () {
  return jspb.Message.getField(this, 4) != null;
};
/**
 * optional string controller_id = 5;
 * @return {string}
 */


proto.com.rookout.RuleStatusMessage.prototype.getControllerId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 5, "")
  );
};
/** @param {string} value */


proto.com.rookout.RuleStatusMessage.prototype.setControllerId = function (value) {
  jspb.Message.setProto3StringField(this, 5, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.AugReportMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.AugReportMessage, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.AugReportMessage.displayName = 'proto.com.rookout.AugReportMessage';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.AugReportMessage.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.AugReportMessage.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.AugReportMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.AugReportMessage.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      agentId: jspb.Message.getFieldWithDefault(msg, 1, ""),
      augId: jspb.Message.getFieldWithDefault(msg, 2, ""),
      arguments: (f = msg.getArguments()) && variant_pb.Variant.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.AugReportMessage}
 */


proto.com.rookout.AugReportMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.AugReportMessage();
  return proto.com.rookout.AugReportMessage.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.AugReportMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.AugReportMessage}
 */


proto.com.rookout.AugReportMessage.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setAgentId(value);
        break;

      case 2:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setAugId(value);
        break;

      case 3:
        var value = new variant_pb.Variant();
        reader.readMessage(value, variant_pb.Variant.deserializeBinaryFromReader);
        msg.setArguments(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.AugReportMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.AugReportMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.AugReportMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.AugReportMessage.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAgentId();

  if (f.length > 0) {
    writer.writeString(1, f);
  }

  f = message.getAugId();

  if (f.length > 0) {
    writer.writeString(2, f);
  }

  f = message.getArguments();

  if (f != null) {
    writer.writeMessage(3, f, variant_pb.Variant.serializeBinaryToWriter);
  }
};
/**
 * optional string agent_id = 1;
 * @return {string}
 */


proto.com.rookout.AugReportMessage.prototype.getAgentId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};
/** @param {string} value */


proto.com.rookout.AugReportMessage.prototype.setAgentId = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string aug_id = 2;
 * @return {string}
 */


proto.com.rookout.AugReportMessage.prototype.getAugId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 2, "")
  );
};
/** @param {string} value */


proto.com.rookout.AugReportMessage.prototype.setAugId = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional Variant arguments = 3;
 * @return {?proto.com.rookout.Variant}
 */


proto.com.rookout.AugReportMessage.prototype.getArguments = function () {
  return (
    /** @type{?proto.com.rookout.Variant} */
    jspb.Message.getWrapperField(this, variant_pb.Variant, 3)
  );
};
/** @param {?proto.com.rookout.Variant|undefined} value */


proto.com.rookout.AugReportMessage.prototype.setArguments = function (value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.com.rookout.AugReportMessage.prototype.clearArguments = function () {
  this.setArguments(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */


proto.com.rookout.AugReportMessage.prototype.hasArguments = function () {
  return jspb.Message.getField(this, 3) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.UserMsg = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.UserMsg, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.UserMsg.displayName = 'proto.com.rookout.UserMsg';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.UserMsg.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.UserMsg.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.UserMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.UserMsg.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      augReport: (f = msg.getAugReport()) && proto.com.rookout.AugReportMessage.toObject(includeInstance, f),
      reportId: jspb.Message.getFieldWithDefault(msg, 2, ""),
      workspaceId: jspb.Message.getFieldWithDefault(msg, 3, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.UserMsg}
 */


proto.com.rookout.UserMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.UserMsg();
  return proto.com.rookout.UserMsg.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.UserMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.UserMsg}
 */


proto.com.rookout.UserMsg.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value = new proto.com.rookout.AugReportMessage();
        reader.readMessage(value, proto.com.rookout.AugReportMessage.deserializeBinaryFromReader);
        msg.setAugReport(value);
        break;

      case 2:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setReportId(value);
        break;

      case 3:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setWorkspaceId(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.UserMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.UserMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.UserMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.UserMsg.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAugReport();

  if (f != null) {
    writer.writeMessage(1, f, proto.com.rookout.AugReportMessage.serializeBinaryToWriter);
  }

  f = message.getReportId();

  if (f.length > 0) {
    writer.writeString(2, f);
  }

  f = message.getWorkspaceId();

  if (f.length > 0) {
    writer.writeString(3, f);
  }
};
/**
 * optional AugReportMessage aug_report = 1;
 * @return {?proto.com.rookout.AugReportMessage}
 */


proto.com.rookout.UserMsg.prototype.getAugReport = function () {
  return (
    /** @type{?proto.com.rookout.AugReportMessage} */
    jspb.Message.getWrapperField(this, proto.com.rookout.AugReportMessage, 1)
  );
};
/** @param {?proto.com.rookout.AugReportMessage|undefined} value */


proto.com.rookout.UserMsg.prototype.setAugReport = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.com.rookout.UserMsg.prototype.clearAugReport = function () {
  this.setAugReport(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */


proto.com.rookout.UserMsg.prototype.hasAugReport = function () {
  return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string report_id = 2;
 * @return {string}
 */


proto.com.rookout.UserMsg.prototype.getReportId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 2, "")
  );
};
/** @param {string} value */


proto.com.rookout.UserMsg.prototype.setReportId = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string workspace_id = 3;
 * @return {string}
 */


proto.com.rookout.UserMsg.prototype.getWorkspaceId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 3, "")
  );
};
/** @param {string} value */


proto.com.rookout.UserMsg.prototype.setWorkspaceId = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.AddAugCommand = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.AddAugCommand, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.AddAugCommand.displayName = 'proto.com.rookout.AddAugCommand';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.AddAugCommand.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.AddAugCommand.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.AddAugCommand} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.AddAugCommand.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      augJson: jspb.Message.getFieldWithDefault(msg, 1, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.AddAugCommand}
 */


proto.com.rookout.AddAugCommand.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.AddAugCommand();
  return proto.com.rookout.AddAugCommand.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.AddAugCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.AddAugCommand}
 */


proto.com.rookout.AddAugCommand.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setAugJson(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.AddAugCommand.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.AddAugCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.AddAugCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.AddAugCommand.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAugJson();

  if (f.length > 0) {
    writer.writeString(1, f);
  }
};
/**
 * optional string aug_json = 1;
 * @return {string}
 */


proto.com.rookout.AddAugCommand.prototype.getAugJson = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};
/** @param {string} value */


proto.com.rookout.AddAugCommand.prototype.setAugJson = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.InitialAugsCommand = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.rookout.InitialAugsCommand.repeatedFields_, null);
};

goog.inherits(proto.com.rookout.InitialAugsCommand, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.InitialAugsCommand.displayName = 'proto.com.rookout.InitialAugsCommand';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */


proto.com.rookout.InitialAugsCommand.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.InitialAugsCommand.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.InitialAugsCommand.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.InitialAugsCommand} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.InitialAugsCommand.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      augsList: jspb.Message.getRepeatedField(msg, 1)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.InitialAugsCommand}
 */


proto.com.rookout.InitialAugsCommand.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.InitialAugsCommand();
  return proto.com.rookout.InitialAugsCommand.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.InitialAugsCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.InitialAugsCommand}
 */


proto.com.rookout.InitialAugsCommand.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.addAugs(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.InitialAugsCommand.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.InitialAugsCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.InitialAugsCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.InitialAugsCommand.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAugsList();

  if (f.length > 0) {
    writer.writeRepeatedString(1, f);
  }
};
/**
 * repeated string augs = 1;
 * @return {!Array<string>}
 */


proto.com.rookout.InitialAugsCommand.prototype.getAugsList = function () {
  return (
    /** @type {!Array<string>} */
    jspb.Message.getRepeatedField(this, 1)
  );
};
/** @param {!Array<string>} value */


proto.com.rookout.InitialAugsCommand.prototype.setAugsList = function (value) {
  jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */


proto.com.rookout.InitialAugsCommand.prototype.addAugs = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

proto.com.rookout.InitialAugsCommand.prototype.clearAugsList = function () {
  this.setAugsList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.RemoveAugCommand = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.RemoveAugCommand, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.RemoveAugCommand.displayName = 'proto.com.rookout.RemoveAugCommand';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.RemoveAugCommand.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.RemoveAugCommand.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.RemoveAugCommand} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.RemoveAugCommand.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      augId: jspb.Message.getFieldWithDefault(msg, 1, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.RemoveAugCommand}
 */


proto.com.rookout.RemoveAugCommand.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.RemoveAugCommand();
  return proto.com.rookout.RemoveAugCommand.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.RemoveAugCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.RemoveAugCommand}
 */


proto.com.rookout.RemoveAugCommand.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setAugId(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.RemoveAugCommand.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.RemoveAugCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.RemoveAugCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.RemoveAugCommand.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAugId();

  if (f.length > 0) {
    writer.writeString(1, f);
  }
};
/**
 * optional string aug_id = 1;
 * @return {string}
 */


proto.com.rookout.RemoveAugCommand.prototype.getAugId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};
/** @param {string} value */


proto.com.rookout.RemoveAugCommand.prototype.setAugId = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.InitFinishedMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.InitFinishedMessage, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.InitFinishedMessage.displayName = 'proto.com.rookout.InitFinishedMessage';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.InitFinishedMessage.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.InitFinishedMessage.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.InitFinishedMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.InitFinishedMessage.toObject = function (includeInstance, msg) {
    var f,
        obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.InitFinishedMessage}
 */


proto.com.rookout.InitFinishedMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.InitFinishedMessage();
  return proto.com.rookout.InitFinishedMessage.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.InitFinishedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.InitFinishedMessage}
 */


proto.com.rookout.InitFinishedMessage.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.InitFinishedMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.InitFinishedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.InitFinishedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.InitFinishedMessage.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.ClearAugsCommand = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.ClearAugsCommand, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.ClearAugsCommand.displayName = 'proto.com.rookout.ClearAugsCommand';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.ClearAugsCommand.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.ClearAugsCommand.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.ClearAugsCommand} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.ClearAugsCommand.toObject = function (includeInstance, msg) {
    var f,
        obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.ClearAugsCommand}
 */


proto.com.rookout.ClearAugsCommand.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.ClearAugsCommand();
  return proto.com.rookout.ClearAugsCommand.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.ClearAugsCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.ClearAugsCommand}
 */


proto.com.rookout.ClearAugsCommand.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.ClearAugsCommand.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.ClearAugsCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.ClearAugsCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.ClearAugsCommand.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.PingMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.PingMessage, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.PingMessage.displayName = 'proto.com.rookout.PingMessage';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.PingMessage.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.PingMessage.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.PingMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.PingMessage.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      value: jspb.Message.getFieldWithDefault(msg, 1, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.PingMessage}
 */


proto.com.rookout.PingMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.PingMessage();
  return proto.com.rookout.PingMessage.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.PingMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.PingMessage}
 */


proto.com.rookout.PingMessage.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setValue(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.PingMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.PingMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.PingMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.PingMessage.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getValue();

  if (f !== 0) {
    writer.writeInt32(1, f);
  }
};
/**
 * optional int32 value = 1;
 * @return {number}
 */


proto.com.rookout.PingMessage.prototype.getValue = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/** @param {number} value */


proto.com.rookout.PingMessage.prototype.setValue = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.ErrorMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.ErrorMessage, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.ErrorMessage.displayName = 'proto.com.rookout.ErrorMessage';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.ErrorMessage.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.ErrorMessage.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.ErrorMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.ErrorMessage.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      message: jspb.Message.getFieldWithDefault(msg, 1, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.ErrorMessage}
 */


proto.com.rookout.ErrorMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.ErrorMessage();
  return proto.com.rookout.ErrorMessage.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.ErrorMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.ErrorMessage}
 */


proto.com.rookout.ErrorMessage.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setMessage(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.ErrorMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.ErrorMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.ErrorMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.ErrorMessage.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getMessage();

  if (f.length > 0) {
    writer.writeString(1, f);
  }
};
/**
 * optional string message = 1;
 * @return {string}
 */


proto.com.rookout.ErrorMessage.prototype.getMessage = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};
/** @param {string} value */


proto.com.rookout.ErrorMessage.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.C2CInitMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.rookout.C2CInitMessage.repeatedFields_, null);
};

goog.inherits(proto.com.rookout.C2CInitMessage, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.C2CInitMessage.displayName = 'proto.com.rookout.C2CInitMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */


proto.com.rookout.C2CInitMessage.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.C2CInitMessage.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.C2CInitMessage.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.C2CInitMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.C2CInitMessage.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      controllerinfo: (f = msg.getControllerinfo()) && controller_info_pb.ControllerInformation.toObject(includeInstance, f),
      connectedagentsList: jspb.Message.getRepeatedField(msg, 2)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.C2CInitMessage}
 */


proto.com.rookout.C2CInitMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.C2CInitMessage();
  return proto.com.rookout.C2CInitMessage.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.C2CInitMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.C2CInitMessage}
 */


proto.com.rookout.C2CInitMessage.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value = new controller_info_pb.ControllerInformation();
        reader.readMessage(value, controller_info_pb.ControllerInformation.deserializeBinaryFromReader);
        msg.setControllerinfo(value);
        break;

      case 2:
        var value =
        /** @type {string} */
        reader.readString();
        msg.addConnectedagents(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.C2CInitMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.C2CInitMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.C2CInitMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.C2CInitMessage.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getControllerinfo();

  if (f != null) {
    writer.writeMessage(1, f, controller_info_pb.ControllerInformation.serializeBinaryToWriter);
  }

  f = message.getConnectedagentsList();

  if (f.length > 0) {
    writer.writeRepeatedString(2, f);
  }
};
/**
 * optional ControllerInformation controllerInfo = 1;
 * @return {?proto.com.rookout.ControllerInformation}
 */


proto.com.rookout.C2CInitMessage.prototype.getControllerinfo = function () {
  return (
    /** @type{?proto.com.rookout.ControllerInformation} */
    jspb.Message.getWrapperField(this, controller_info_pb.ControllerInformation, 1)
  );
};
/** @param {?proto.com.rookout.ControllerInformation|undefined} value */


proto.com.rookout.C2CInitMessage.prototype.setControllerinfo = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.com.rookout.C2CInitMessage.prototype.clearControllerinfo = function () {
  this.setControllerinfo(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */


proto.com.rookout.C2CInitMessage.prototype.hasControllerinfo = function () {
  return jspb.Message.getField(this, 1) != null;
};
/**
 * repeated string connectedAgents = 2;
 * @return {!Array<string>}
 */


proto.com.rookout.C2CInitMessage.prototype.getConnectedagentsList = function () {
  return (
    /** @type {!Array<string>} */
    jspb.Message.getRepeatedField(this, 2)
  );
};
/** @param {!Array<string>} value */


proto.com.rookout.C2CInitMessage.prototype.setConnectedagentsList = function (value) {
  jspb.Message.setField(this, 2, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */


proto.com.rookout.C2CInitMessage.prototype.addConnectedagents = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

proto.com.rookout.C2CInitMessage.prototype.clearConnectedagentsList = function () {
  this.setConnectedagentsList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.AgentsList = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.rookout.AgentsList.repeatedFields_, null);
};

goog.inherits(proto.com.rookout.AgentsList, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.AgentsList.displayName = 'proto.com.rookout.AgentsList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */


proto.com.rookout.AgentsList.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.AgentsList.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.AgentsList.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.AgentsList} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.AgentsList.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      agentsIdsList: jspb.Message.getRepeatedField(msg, 1)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.AgentsList}
 */


proto.com.rookout.AgentsList.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.AgentsList();
  return proto.com.rookout.AgentsList.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.AgentsList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.AgentsList}
 */


proto.com.rookout.AgentsList.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.addAgentsIds(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.AgentsList.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.AgentsList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.AgentsList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.AgentsList.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAgentsIdsList();

  if (f.length > 0) {
    writer.writeRepeatedString(1, f);
  }
};
/**
 * repeated string agents_ids = 1;
 * @return {!Array<string>}
 */


proto.com.rookout.AgentsList.prototype.getAgentsIdsList = function () {
  return (
    /** @type {!Array<string>} */
    jspb.Message.getRepeatedField(this, 1)
  );
};
/** @param {!Array<string>} value */


proto.com.rookout.AgentsList.prototype.setAgentsIdsList = function (value) {
  jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */


proto.com.rookout.AgentsList.prototype.addAgentsIds = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

proto.com.rookout.AgentsList.prototype.clearAgentsIdsList = function () {
  this.setAgentsIdsList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.AgentIdHitCountPair = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.AgentIdHitCountPair, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.AgentIdHitCountPair.displayName = 'proto.com.rookout.AgentIdHitCountPair';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.AgentIdHitCountPair.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.AgentIdHitCountPair.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.AgentIdHitCountPair} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.AgentIdHitCountPair.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      agentId: jspb.Message.getFieldWithDefault(msg, 1, ""),
      hitCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.AgentIdHitCountPair}
 */


proto.com.rookout.AgentIdHitCountPair.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.AgentIdHitCountPair();
  return proto.com.rookout.AgentIdHitCountPair.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.AgentIdHitCountPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.AgentIdHitCountPair}
 */


proto.com.rookout.AgentIdHitCountPair.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setAgentId(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setHitCount(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.AgentIdHitCountPair.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.AgentIdHitCountPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.AgentIdHitCountPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.AgentIdHitCountPair.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAgentId();

  if (f.length > 0) {
    writer.writeString(1, f);
  }

  f = message.getHitCount();

  if (f !== 0) {
    writer.writeUint32(2, f);
  }
};
/**
 * optional string agent_id = 1;
 * @return {string}
 */


proto.com.rookout.AgentIdHitCountPair.prototype.getAgentId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};
/** @param {string} value */


proto.com.rookout.AgentIdHitCountPair.prototype.setAgentId = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional uint32 hit_count = 2;
 * @return {number}
 */


proto.com.rookout.AgentIdHitCountPair.prototype.getHitCount = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/** @param {number} value */


proto.com.rookout.AgentIdHitCountPair.prototype.setHitCount = function (value) {
  jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.HitCountUpdateMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.rookout.HitCountUpdateMessage.repeatedFields_, null);
};

goog.inherits(proto.com.rookout.HitCountUpdateMessage, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.com.rookout.HitCountUpdateMessage.displayName = 'proto.com.rookout.HitCountUpdateMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */


proto.com.rookout.HitCountUpdateMessage.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.HitCountUpdateMessage.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.HitCountUpdateMessage.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.HitCountUpdateMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.HitCountUpdateMessage.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      augId: jspb.Message.getFieldWithDefault(msg, 1, ""),
      hitcountinformationList: jspb.Message.toObjectList(msg.getHitcountinformationList(), proto.com.rookout.AgentIdHitCountPair.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.HitCountUpdateMessage}
 */


proto.com.rookout.HitCountUpdateMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.HitCountUpdateMessage();
  return proto.com.rookout.HitCountUpdateMessage.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.HitCountUpdateMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.HitCountUpdateMessage}
 */


proto.com.rookout.HitCountUpdateMessage.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setAugId(value);
        break;

      case 2:
        var value = new proto.com.rookout.AgentIdHitCountPair();
        reader.readMessage(value, proto.com.rookout.AgentIdHitCountPair.deserializeBinaryFromReader);
        msg.addHitcountinformation(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.HitCountUpdateMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.HitCountUpdateMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.HitCountUpdateMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.HitCountUpdateMessage.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAugId();

  if (f.length > 0) {
    writer.writeString(1, f);
  }

  f = message.getHitcountinformationList();

  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.com.rookout.AgentIdHitCountPair.serializeBinaryToWriter);
  }
};
/**
 * optional string aug_id = 1;
 * @return {string}
 */


proto.com.rookout.HitCountUpdateMessage.prototype.getAugId = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};
/** @param {string} value */


proto.com.rookout.HitCountUpdateMessage.prototype.setAugId = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * repeated AgentIdHitCountPair hitCountInformation = 2;
 * @return {!Array<!proto.com.rookout.AgentIdHitCountPair>}
 */


proto.com.rookout.HitCountUpdateMessage.prototype.getHitcountinformationList = function () {
  return (
    /** @type{!Array<!proto.com.rookout.AgentIdHitCountPair>} */
    jspb.Message.getRepeatedWrapperField(this, proto.com.rookout.AgentIdHitCountPair, 2)
  );
};
/** @param {!Array<!proto.com.rookout.AgentIdHitCountPair>} value */


proto.com.rookout.HitCountUpdateMessage.prototype.setHitcountinformationList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.com.rookout.AgentIdHitCountPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.rookout.AgentIdHitCountPair}
 */


proto.com.rookout.HitCountUpdateMessage.prototype.addHitcountinformation = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.com.rookout.AgentIdHitCountPair, opt_index);
};

proto.com.rookout.HitCountUpdateMessage.prototype.clearHitcountinformationList = function () {
  this.setHitcountinformationList([]);
};

goog.object.extend(exports, proto.com.rookout);
//# sourceMappingURL=messages_pb.js.map